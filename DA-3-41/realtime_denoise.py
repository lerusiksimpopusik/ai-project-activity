import cv2
import numpy as np
import os
import time


# =====================================================================
# –§—É–Ω–∫—Ü–∏–∏, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–¥–∞—á–∏ CV-2-41 (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—É–º–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏)
# =====================================================================

def estimate_noise(img):
    """
    –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —à—É–º–∞ —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ä—Å–∏—é –ª–∞–ø–ª–∞—Å–∏–∞–Ω–∞.
    –í–∑—è—Ç–æ –∏–∑ CV-2-41 (—Ñ—É–Ω–∫—Ü–∏—è estimate_noise).
    """
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    lap = cv2.Laplacian(gray, cv2.CV_64F)
    return lap.var()


def adaptive_denoise(img, method="auto", ksize=5, sigma=75):
    """
    –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —à—É–º–∞.
    –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ adaptive_denoise –∏–∑ CV-2-41,
    –¥–æ–ø–æ–ª–Ω–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ trackbar.
    """
    noise_level = estimate_noise(img)

    if method == "auto":
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —à—É–º–∞
        if noise_level < 100:
            return cv2.GaussianBlur(img, (3, 3), 0.5), "GaussianBlur (3x3)"
        elif noise_level < 500:
            return cv2.medianBlur(img, 5), "MedianBlur (5)"
        else:
            return cv2.bilateralFilter(img, 9, 75, 75), "Bilateral (9,75,75)"
    elif method == "gaussian":
        return cv2.GaussianBlur(img, (ksize, ksize), 0), f"Gaussian ({ksize}x{ksize})"
    elif method == "median":
        return cv2.medianBlur(img, ksize), f"Median ({ksize})"
    elif method == "bilateral":
        return cv2.bilateralFilter(img, 9, sigma, sigma), f"Bilateral ({sigma})"
    else:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")


# =====================================================================
# üîπ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (trackbar)
# =====================================================================

def setup_trackbar(window_name):
    """
    –°–æ–∑–¥–∞—ë—Ç trackbar –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    –ù–æ–≤—ã–π –∫–æ–¥, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    cv2.createTrackbar("Filter", window_name, 0, 3, lambda x: None)
    cv2.createTrackbar("Kernel", window_name, 3, 15, lambda x: None)
    cv2.createTrackbar("Sigma", window_name, 75, 150, lambda x: None)
    cv2.createTrackbar("Save", window_name, 0, 1, lambda x: None)


def get_trackbar_values(window_name):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å trackbar.
    –ù–æ–≤—ã–π –∫–æ–¥ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞.
    """
    filter_id = cv2.getTrackbarPos("Filter", window_name)
    ksize = cv2.getTrackbarPos("Kernel", window_name)
    sigma = cv2.getTrackbarPos("Sigma", window_name)
    save_flag = cv2.getTrackbarPos("Save", window_name)

    filters = {0: "auto", 1: "gaussian", 2: "median", 3: "bilateral"}
    method = filters.get(filter_id, "auto")

    # kernel size –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ—á—ë—Ç–Ω—ã–º
    if ksize % 2 == 0:
        ksize += 1

    return method, ksize, sigma, save_flag


# =====================================================================
# –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
# =====================================================================

def initialize_video_output(filename="denoised_output.avi", fps=30, frame_size=(640, 480)):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç VideoWriter –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª.
    –ù–æ–≤—ã–π –∫–æ–¥ (–¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É–Ω–∫—Ç–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª").
    """
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    return cv2.VideoWriter(filename, fourcc, fps, (frame_size[0] * 2, frame_size[1]))


# =====================================================================
# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ‚Äî –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –∫–æ–¥–∞ CV-1-10 (—Ä–∞–±–æ—Ç–∞ —Å –≤–µ–±-–∫–∞–º–µ—Ä–æ–π)
# =====================================================================

def main():
    """
    –ó–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫–æ–¥–µ CV-1-10, –Ω–æ –¥–æ–ø–æ–ª–Ω–µ–Ω:
      - –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π (–∏–∑ CV-2-41)
      - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–≤—É—Ö –≤–∏–¥–µ–æ (–∏—Å—Ö–æ–¥–Ω–æ–µ + –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ)
      - –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ trackbar
      - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É.")
        return

    window_name = "Noise Filtering (press 'q' to quit)"
    cv2.namedWindow(window_name)
    setup_trackbar(window_name)

    prev_time = time.time()
    writer = None
    print("–ó–∞–ø—É—Å–∫. –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

    while True:
        # –ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã
        ret, frame = cap.read()
        if not ret:
            print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã.")
            break

        frame = cv2.resize(frame, (640, 480))

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        method, ksize, sigma, save_flag = get_trackbar_values(window_name)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–¥—Ä–∞ (–≤–∑—è—Ç–æ –∏–∑ CV-2-41, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –≤–∏–¥–µ–æ)
        denoised, method_name = adaptive_denoise(frame, method, ksize, sigma)

        # –†–∞—Å—á—ë—Ç FPS (–≤–∑—è—Ç–æ –∏–∑ CV-1-10)
        now = time.time()
        fps = 1.0 / (now - prev_time)
        prev_time = now

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∫–∞–¥—Ä–æ–≤
        combined = np.hstack((frame, denoised))
        cv2.putText(combined, f"FPS: {fps:.1f} | {method_name}", (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

        cv2.imshow(window_name, combined)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é –≤–∏–¥–µ–æ
        if save_flag and writer is None:
            os.makedirs("results", exist_ok=True)
            writer = initialize_video_output("results/denoised_output.avi", 30, (640, 480))
            print("üíæ –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ –≤–∫–ª—é—á–µ–Ω–∞.")
        elif not save_flag and writer is not None:
            writer.release()
            writer = None
            print("–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

        # –ó–∞–ø–∏—Å—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        if writer is not None:
            writer.write(combined)

        # –í—ã—Ö–æ–¥ (–∏–∑ CV-1-10)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    cap.release()
    if writer is not None:
        writer.release()
    cv2.destroyAllWindows()
    print("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# =====================================================================
# üîπ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =====================================================================
if __name__ == "__main__":
    main()
